# -*- coding: utf-8 -*-
"""Assignment-5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q9opkUGUxNUfmkVe3SWUOkktHguGxzo2

Q.1 For the array gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]'), Find
- Sum of all elements
- Sum of all elements row-wise
- Sum of all elements column-wise
"""

import numpy as np
gfg = np.matrix('[4,1,9;12,3,1;4,5,6]')
sum = np.sum(gfg)
print(sum)

sum = np.sum(gfg, axis = 0)
print(sum)

sum = np.sum(gfg, axis = 1)
print(sum)

"""Q.2
(a) For the array: array = np.array([10, 52, 62, 16, 16, 54, 453]), find
1. Sorted array
2. Indices of sorted array
3. 4 smallest elements
4. 5 largest elements
"""

import numpy as np
array = np.array([10,52,62,16,16,54,453])
sorted_array = np.sort(array)
print(sorted_array)
indices = np.argsort(array)
print(indices)
print(sorted_array[:4])
print(sorted_array[-5:])

"""Q.2
(b) For the array: array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0]), find
1. Integer elements only
2. Float elements only
"""

import numpy as np
array = np.array([1.0, 1.2, 2.2, 2.0,3.0, 2.0])
int_array = array[array == array.astype(int)]
print(int_array)
float_array = array[array != array.astype(int)]
print(float_array)

"""Q.3 You are given a weekly sales dataset and need to perform various operations
using NumPy broadcasting.

a) Generate your unique sales dataset:
- Take the sum of the ASCII values of the initials of your first and last
name. Call this value X. (If your initials are A B → ASCII sum = 65 + 66 = 131 → sales = [131, 181, 231, 281, 331].)
- Create a NumPy array sales with values [X, X+50, X+100, X+150,
X+200].
"""

import numpy as np
X = 65 + 66
sales = np.array([X, X + 50, X + 100, X + 150, X + 200])
print("sales dataset : ", sales)

"""b) Compute your personalized tax rate as ((X % 5) + 5) / 100.
- Use broadcasting to apply this tax rate to each sales value.
"""

tax_rate = ((X%5) +5)/100
sales_after_tax = sales*(1 + tax_rate)
print("sales after tax : ", sales_after_tax)

"""c) Adjust sales based on discount:
- If sales < X+100, apply a 5% discount.
- If sales >= X+100, apply a 10% discount.
"""

discounted_sale = np.where(sales < X + 100, sales*0.95, sales*0.9)
print("discounted sales : ", discounted_sale)

"""d) Expand sales data for multiple weeks:
- Create a 3×5 matrix representing three weeks of sales by stacking
sales three times using broadcasting.
- Increase sales by 2% per week using element-wise broadcasting.

"""

week_sale = np.tile(sales, (3,1))
sale_increase = week_sale*(1 + 0.02)**np.arange(3).reshape(-1,1)
print(sale_increase)

"""Q4. Generate x values using np.linspace() from -10 to 10 with 100 points. Use
each function from the list below and compute y values using NumPy:
- Y = x2
- Y = sin(x)
- Y = ex
- Y = log(|x| + 1)

Plot the chosen function using Matplotlib. Add title, labels, and grid for clarity.
"""

import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(-10,10,100)
y1 = x**2
y2 = np.sin(x)
y3 = np.exp(x)
y4 = np.log(abs(x) + 1)
plt.figure(figsize=(10,6))
plt.plot(x, y1, label='x^2', color = 'red')
plt.plot(x, y2, label='sin(x)', color = 'blue')
plt.plot(x, y3, label='exp(x)', color = 'green')
plt.plot(x, y4, label='log(|x| + 1)', color = 'yellow')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Graph of Functions')
plt.legend()
plt.grid(True)
plt.show()