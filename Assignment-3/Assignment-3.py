# -*- coding: utf-8 -*-
"""Cognitive Computing-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14R4zUsykSQZY5AiuG5eJnpLOj6Z1fZGF

Q1 Create a dataset as follow in the table.
"""

dataSet = {
    "Tid":[1,2,3,4,5,6,7,8,9,10],
    "Refund":["Yes","No","No","Yes","No","No","Yes","No","No","No"],
    "Marital Status":["Single","Married","Single","Married","Divorced","Married","Divorced","Single","Married","Single"],
    "Taxable Income (K)": [125,100,70,120,95,60,220,85,75,90],
    "Cheat": ["No","No","No","No","Yes","No","No","Yes","No","Yes"]
}

"""Q.2 From the above table that you have created, locate row 0, 4, 7 and 8 using DataFrame"""

import pandas as pd

dataSet = {
    "Tid":[1,2,3,4,5,6,7,8,9,10],
    "Refund":["Yes","No","No","Yes","No","No","Yes","No","No","No"],
    "Marital Status":["Single","Married","Single","Married","Divorced","Married","Divorced","Single","Married","Single"],
    "Taxable Income (K)": [125,100,70,120,95,60,220,85,75,90],
    "Cheat": ["No","No","No","No","Yes","No","No","Yes","No","Yes"]
}

myDataFrame = pd.DataFrame(dataSet)
print(myDataFrame)
print()
print(myDataFrame.iloc[0])
print()
print(myDataFrame.iloc[4])
print()
print(myDataFrame.iloc[7])
print()
print(myDataFrame.iloc[8])

""" Q.3 Navigate the DataFrame and do the following task for the table created in question 1:
 1.	Select row from index 3 to 7.
 2.	Select row from index 4 to 8, and column 2 to 4.
 3.	Select all rows with column index 1 to 3 (include index 3 during selection).

"""

import pandas as pd

dataSet = {
    "Tid":[1,2,3,4,5,6,7,8,9,10],
    "Refund":["Yes","No","No","Yes","No","No","Yes","No","No","No"],
    "Marital Status":["Single","Married","Single","Married","Divorced","Married","Divorced","Single","Married","Single"],
    "Taxable Income (K)": [125,100,70,120,95,60,220,85,75,90],
    "Cheat": ["No","No","No","No","Yes","No","No","Yes","No","Yes"]
}

myDataFrame = pd.DataFrame(dataSet)

myDataFrame.iloc[3:8]

myDataFrame.iloc[4:9,2:5]

myDataFrame.iloc[:,1:4]

pip install opendatasets

pip install pandas

import opendatasets as od
import pandas as pd

od.download("https://www.kaggle.com/datasets/uciml/iris")

"""Q.4	Read a csv file and display its first five rows."""

import pandas as pd

df = pd.read_csv("./iris/Iris.csv")

df.iloc[0:6]

"""Q.5	From the csv file (uploaded in the Q.4) delete row 4, and delete column 3. Display the result."""

import pandas as pd
df = pd.read_csv("./iris/Iris.csv")
df.drop(index=3,inplace=True)
df.drop(columns="PetalLengthCm",inplace=True)
df

from google.colab import files
uploaded = files.upload()

# Q.6	Create a sample dataset (employees.csv) containing information about employees in a company
import pandas as pd

df = pd.read_csv("EmployeeDetails.csv")

#a)	Shape (number of rows and columns) of the DataFrame.
df.shape

#b)	Summary of the DataFrame that includes the data types and non-null counts for each column.
df.info()

#c)	Generate descriptive statistics.
df.describe()

#d)	Display the first 5 rows and last 3 rows of the dataset.
df.head(5)
df.tail(3)

# e)	Calculate the following statistics from the dataset:
# i.	The average salary of employees.
# ii.	The total bonus paid to all employees.
# iii. The youngest employee's age.
# iv. The highest performance rating

df['Salary '].mean()
df['Bonus '].sum()
df['Age '].min()
df['Rating '].max()


# f)	Sort the DataFrame by the Salary column in descending order.
df.sort_values(by='Salary ', ascending=True, inplace=True)
#g)	Add a new column that categorizes employees based on their performance rating:
# i.	Excellent for ratings >= 4.5
# ii.	Good for ratings >= 4.0 but < 4.5
# iii.	Average for ratings < 4.0

def categorize_performance(rating):
    if rating >= 4.5:
        return 'Excellent'
    elif 4.0 <= rating < 4.5:
        return 'Good'
    else:
        return 'Average'

df['Performance_Category'] = df['Rating '].apply(categorize_performance)

# h)	Identify missing values in the DataFrame. (DOUBT)
nullers = df.isnull().sum()
print(nullers)

# i)	Rename the Employee_ID column to ID.
print(df.columns)
df.rename(columns={'Employee_ID ':"ID"},inplace=True)


#j)	Find all employees who:
# i.	Have more than 5 years of experience.
# ii.	Belong to the IT department.  (DOUBT)

df_v2 = df[(df['Years_of_Experience '] > 5) & (df['Department '] == 'IT')]
df_v2.head(2)

# k)	Modify the dataset by adding a new column, Tax, which deducts 10% of the Salary.
df['Tax'] = df['Salary '] * 0.10


# l)	Save the modified DataFrame (with added columns) to a new CSV file.
df.to_csv('new_data.csv', index=False)